// hooks/useLocationPermission.ts
import { useState, useEffect, useCallback } from 'react';
import { debounce } from 'lodash'; // Gi·∫£ s·ª≠ b·∫°n d√πng lodash ƒë·ªÉ debounce

// ƒê·ªãnh nghƒ©a c√°c kh√≥a m·∫∑c ƒë·ªãnh
const DEFAULT_CONFIG = {
	LOCATION_PERMISSION_KEY: 'locationPermissionAsked',
	LOCATION_TRACKING_KEY: 'startTracking',
	PERMISSION_TIMEOUT: 5000, // Timeout 5 gi√¢y cho permissions query
};

export interface LocationPermissionState {
	hasAskedPermission: boolean;
	isTrackingAllowed: boolean;
	needsUserDecision: boolean;
	permissionState: 'granted' | 'denied' | 'prompt' | 'unknown';
	errorMessage: string | null;
	isDeviceLocationAvailable: boolean;
}

export interface LocationPermissionConfig {
	locationPermissionKey?: string;
	locationTrackingKey?: string;
	permissionTimeout?: number;
}

export const useLocationPermission = (config: LocationPermissionConfig = {}) => {
	const {
		locationPermissionKey = DEFAULT_CONFIG.LOCATION_PERMISSION_KEY,
		locationTrackingKey = DEFAULT_CONFIG.LOCATION_TRACKING_KEY,
		permissionTimeout = DEFAULT_CONFIG.PERMISSION_TIMEOUT,
	} = config;

	const [state, setState] = useState<LocationPermissionState>({
		hasAskedPermission: false,
		isTrackingAllowed: false,
		needsUserDecision: false,
		permissionState: 'unknown',
		errorMessage: null,
		isDeviceLocationAvailable: false,
	});

	const [isLoading, setIsLoading] = useState(true);

	// H√†m ki·ªÉm tra kh·∫£ nƒÉng l·∫•y v·ªã tr√≠ th·ª±c t·∫ø
	const checkGeolocationAvailability = useCallback(
		async (callback: (isAvailable: boolean, error?: string) => void) => {
			if (!navigator.geolocation) {
				callback(false, 'Geolocation kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n thi·∫øt b·ªã n√†y.');
				return;
			}

			try {
				await navigator.geolocation.getCurrentPosition(
					() => callback(true),
					(error) => callback(false, `L·ªói l·∫•y v·ªã tr√≠: ${error.message}`),
					{ timeout: 5000, maximumAge: 0, enableHighAccuracy: false }
				);
			} catch (error) {
				callback(false, `L·ªói l·∫•y v·ªã tr√≠: ${(error as Error).message}`);
			}
		},
		[]
	);

	// Ki·ªÉm tra tr·∫°ng th√°i quy·ªÅn
	useEffect(() => {
		const checkPermissionState = async () => {
			if (typeof window === 'undefined') {
				setState((prev) => ({ ...prev, errorMessage: 'M√¥i tr∆∞·ªùng kh√¥ng h·ªó tr·ª£ geolocation' }));
				setIsLoading(false);
				return;
			}

			// Ki·ªÉm tra sessionStorage
			const hasAskedBefore = sessionStorage.getItem(locationPermissionKey) === 'true';
			const trackingPreference = sessionStorage.getItem(locationTrackingKey) === 'true';
			const permanentlyDenied = sessionStorage.getItem(`${locationPermissionKey}_permanent`) === 'true';

			console.log(
				'üîç Permission Check - hasAskedBefore:',
				hasAskedBefore,
				'trackingPreference:',
				trackingPreference,
				'permanentlyDenied:',
				permanentlyDenied
			);

			// N·∫øu ƒë√£ t·ª´ ch·ªëi vƒ©nh vi·ªÖn, kh√¥ng h·ªèi l·∫°i
			if (permanentlyDenied) {
				setState({
					hasAskedPermission: true,
					isTrackingAllowed: false,
					needsUserDecision: false,
					permissionState: 'denied',
					errorMessage: 'Quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë√£ b·ªã t·ª´ ch·ªëi vƒ©nh vi·ªÖn',
					isDeviceLocationAvailable: false,
				});
				setIsLoading(false);
				return;
			}

			// N·∫øu ƒë√£ h·ªèi tr∆∞·ªõc ƒë√≥, s·ª≠ d·ª•ng preference
			if (hasAskedBefore) {
				setState({
					hasAskedPermission: true,
					isTrackingAllowed: trackingPreference,
					needsUserDecision: false,
					permissionState: trackingPreference ? 'granted' : 'denied',
					errorMessage: null,
					isDeviceLocationAvailable: trackingPreference,
				});
				setIsLoading(false);
				return;
			}

			// Ki·ªÉm tra kh·∫£ nƒÉng l·∫•y v·ªã tr√≠
			await checkGeolocationAvailability(async (isAvailable, error) => {
				if (!isAvailable) {
					setState((prev) => ({
						...prev,
						errorMessage: error || 'Kh√¥ng th·ªÉ truy c·∫≠p v·ªã tr√≠',
						isDeviceLocationAvailable: false,
					}));
					setIsLoading(false);
					return;
				}

				// Ki·ªÉm tra quy·ªÅn tr√¨nh duy·ªát
				if (navigator.permissions) {
					try {
						const timeoutPromise = new Promise<never>((_, reject) =>
							setTimeout(() => reject(new Error('Timeout khi ki·ªÉm tra quy·ªÅn')), permissionTimeout)
						);
						const permissionPromise = navigator.permissions.query({ name: 'geolocation' });

						// TypeScript: ƒê·∫£m b·∫£o result l√† PermissionStatus
						const result = (await Promise.race([permissionPromise, timeoutPromise])) as PermissionStatus;

						console.log('üîç Browser permission state:', result.state);

						switch (result.state) {
							case 'granted':
								setState({
									hasAskedPermission: true,
									isTrackingAllowed: true,
									needsUserDecision: false,
									permissionState: 'granted',
									errorMessage: null,
									isDeviceLocationAvailable: true,
								});
								sessionStorage.setItem(locationPermissionKey, 'true');
								sessionStorage.setItem(locationTrackingKey, 'true');
								break;

							case 'denied':
								setState({
									hasAskedPermission: true,
									isTrackingAllowed: false,
									needsUserDecision: false,
									permissionState: 'denied',
									errorMessage: 'Quy·ªÅn truy c·∫≠p v·ªã tr√≠ b·ªã t·ª´ ch·ªëi',
									isDeviceLocationAvailable: false,
								});
								sessionStorage.setItem(locationPermissionKey, 'true');
								sessionStorage.setItem(locationTrackingKey, 'false');
								break;

							case 'prompt':
								// Th·ª≠ g·ªçi getCurrentPosition ƒë·ªÉ k√≠ch ho·∫°t l·ªùi nh·∫Øc quy·ªÅn
								await checkGeolocationAvailability((isAvailable, error) => {
									if (isAvailable) {
										setState({
											hasAskedPermission: false,
											isTrackingAllowed: false,
											needsUserDecision: true,
											permissionState: 'prompt',
											errorMessage: null,
											isDeviceLocationAvailable: true,
										});
									} else {
										setState({
											hasAskedPermission: true,
											isTrackingAllowed: false,
											needsUserDecision: false,
											permissionState: 'denied',
											errorMessage: error || 'Kh√¥ng th·ªÉ truy c·∫≠p v·ªã tr√≠',
											isDeviceLocationAvailable: false,
										});
									}
								});
								break;

							default:
								setState({
									hasAskedPermission: false,
									isTrackingAllowed: false,
									needsUserDecision: true,
									permissionState: 'unknown',
									errorMessage: 'Tr·∫°ng th√°i quy·ªÅn kh√¥ng x√°c ƒë·ªãnh',
									isDeviceLocationAvailable: false,
								});
						}

						// L·∫Øng nghe thay ƒë·ªïi quy·ªÅn v·ªõi debounce
						result.onchange = debounce(() => {
							console.log('üîÑ Permission changed to:', result.state);
							checkPermissionState();
						}, 500);

					} catch (error) {
						console.warn('‚ö†Ô∏è Permissions API failed:', error);
						setState({
							hasAskedPermission: false,
							isTrackingAllowed: false,
							needsUserDecision: true,
							permissionState: 'unknown',
							errorMessage: `L·ªói ki·ªÉm tra quy·ªÅn: ${(error as Error).message}`,
							isDeviceLocationAvailable: false,
						});
					}
				} else {
					console.warn('‚ö†Ô∏è Permissions API not supported');
					setState({
						hasAskedPermission: false,
						isTrackingAllowed: false,
						needsUserDecision: true,
						permissionState: 'unknown',
						errorMessage: 'Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ API Permissions',
						isDeviceLocationAvailable: false,
					});
				}

				setIsLoading(false);
			});
		};

		checkPermissionState();
	}, [checkGeolocationAvailability, locationPermissionKey, locationTrackingKey, permissionTimeout]);

	// Cho ph√©p truy c·∫≠p v·ªã tr√≠
	const allowLocation = useCallback(() => {
		console.log('‚úÖ User allowed location tracking');
		setState((prev) => ({
			...prev,
			hasAskedPermission: true,
			isTrackingAllowed: true,
			needsUserDecision: false,
			permissionState: 'granted',
			errorMessage: null,
			isDeviceLocationAvailable: true,
		}));
		sessionStorage.setItem(locationPermissionKey, 'true');
		sessionStorage.setItem(locationTrackingKey, 'true');
	}, [locationPermissionKey, locationTrackingKey]);

	// T·ª´ ch·ªëi truy c·∫≠p v·ªã tr√≠
	const denyLocation = useCallback(
		(permanent: boolean = false) => {
			console.log('‚ùå User denied location tracking, permanent:', permanent);
			setState((prev) => ({
				...prev,
				hasAskedPermission: true,
				isTrackingAllowed: false,
				needsUserDecision: false,
				permissionState: 'denied',
				errorMessage: permanent ? 'Quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë√£ b·ªã t·ª´ ch·ªëi vƒ©nh vi·ªÖn' : null,
				isDeviceLocationAvailable: false,
			}));
			sessionStorage.setItem(locationPermissionKey, 'true');
			sessionStorage.setItem(locationTrackingKey, 'false');
			if (permanent) {
				sessionStorage.setItem(`${locationPermissionKey}_permanent`, 'true');
			}
		},
		[locationPermissionKey, locationTrackingKey]
	);

	// B·∫≠t/t·∫Øt theo d√µi
	const toggleTracking = useCallback(
		(enabled: boolean) => {
			console.log('üîÑ Toggling location tracking:', enabled);
			setState((prev) => ({
				...prev,
				isTrackingAllowed: enabled,
				permissionState: enabled ? 'granted' : 'denied',
				errorMessage: null,
			}));
			sessionStorage.setItem(locationTrackingKey, enabled.toString());
		},
		[locationTrackingKey]
	);

	// ƒê·∫∑t l·∫°i quy·ªÅn
	const resetPermission = useCallback(() => {
		console.log('üîÑ Resetting location permission');
		setState({
			hasAskedPermission: false,
			isTrackingAllowed: false,
			needsUserDecision: true,
			permissionState: 'unknown',
			errorMessage: 'Vui l√≤ng ƒë·∫∑t l·∫°i quy·ªÅn v·ªã tr√≠ trong c√†i ƒë·∫∑t tr√¨nh duy·ªát n·∫øu c·∫ßn.',
			isDeviceLocationAvailable: false,
		});
		sessionStorage.removeItem(locationPermissionKey);
		sessionStorage.removeItem(locationTrackingKey);
		sessionStorage.removeItem(`${locationPermissionKey}_permanent`);
	}, [locationPermissionKey, locationTrackingKey]);

	return {
		...state,
		isLoading,
		allowLocation,
		denyLocation,
		toggleTracking,
		resetPermission,
	};
};